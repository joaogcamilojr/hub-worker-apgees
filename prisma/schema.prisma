// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String           @unique
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  deleted_at DateTime?
  accounts   users_accounts[]
  work_items work_items[]
  provider   auth_providers?
}

model auth_providers {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user_id String @unique @db.ObjectId

  nickname       String
  name           String
  picture        String
  updated_at     DateTime
  email          String   @unique
  email_verified Boolean
  sub            String
  sid            String

  user users @relation(fields: [user_id], references: [id])
}

model accounts {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  deleted_at           DateTime?
  users                users_accounts[]
  apps                 apps_accounts[]
  work_items           work_items[]
  work_item_categories work_item_categories[]
}

model users_accounts {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  role       Int       @default(0)
  user_id    String    @db.ObjectId
  account_id String    @db.ObjectId
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  user       users     @relation(fields: [user_id], references: [id])
  account    accounts  @relation(fields: [account_id], references: [id])

  @@unique([user_id, account_id])
}

model apps {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  scope      String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  accounts apps_accounts[]
}

model apps_accounts {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  app_id      String    @db.ObjectId
  account_id  String    @db.ObjectId
  hired_at    DateTime  @default(now())
  canceled_at DateTime?
  app         apps      @relation(fields: [app_id], references: [id])
  account     accounts  @relation(fields: [account_id], references: [id])

  @@unique([app_id, account_id])
}

model work_item_categories {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  key        String       @unique
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  deleted_at DateTime?
  account_id String       @db.ObjectId
  account    accounts     @relation(fields: [account_id], references: [id])
  work_items work_items[]
}

model work_items {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  user_id         String               @db.ObjectId
  title           String
  scope           String               @default("new")
  content         String?
  checked         Boolean              @default(false)
  date            DateTime?
  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  deleted_at      DateTime?
  woi_category_id String               @db.ObjectId
  woi_category    work_item_categories @relation(fields: [woi_category_id], references: [id])
  account_id      String               @db.ObjectId
  account         accounts             @relation(fields: [account_id], references: [id])
  user            users                @relation(fields: [user_id], references: [id])
}

model notifications {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  external_id String
  type        Int       @default(0)
  to_retain   Boolean   @default(false)
  data        Json?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
}
